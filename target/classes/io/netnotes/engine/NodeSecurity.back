package io.netnotes.engine;

import java.io.EOFException;
import java.io.IOException;

import io.netnotes.engine.noteBytes.NoteBoolean;
import io.netnotes.engine.noteBytes.NoteBytes;
import io.netnotes.engine.noteBytes.NoteBytesObject;
import io.netnotes.engine.noteBytes.NoteBytesPair;
import io.netnotes.engine.noteBytes.NoteBytesReadOnly;
import io.netnotes.engine.noteBytes.NoteBytesReader;
import io.netnotes.engine.noteBytes.NoteBytesWriter;

public class NodeSecurity {

    private final NoteBytes m_locationUUID;      // permission/authorization UUID string
    private Node m_node = null;    
    private final NoteBytes m_publicKey;
    public static final NoteBytesReadOnly DEFAULT_SECURITY_LEVEL_KEY = new NoteBytesReadOnly("securityLevel");

    public NodeSecurity(Node node, NoteBytes locationUUID, NoteBytes publicKey, NoteBytes securityLevel) {
        this.m_locationUUID = locationUUID;
        this.m_node = node;
        this.m_securityLevel = securityLevel;
        this.m_publicKey = publicKey;
    }
    public NodeSecurity(Node node, NoteBytesObject storedLocation) {

        this.m_locationUUID = storedLocation.get(LOCATION_UUID).getValue();
        this.m_node = node;
        this.m_securityLevel = storedLocation.get(LOCATION_SECURITY_LEVEL).getValue();
        this.m_publicKey = storedLocation.get(LOCATION_PUBLIC_KEY).getValue();

        storedLocation.ruin();
    }
    public void initNode(Node node){
        if(m_node == null){
            m_node = node;
        }else{
            throw new IllegalStateException("Node is initialized and can not be modified");
        }
    }
    
    public NoteBytes getNodeId() { return m_node.getNodeId(); }
    public NoteBytes getLocationUUID() { return m_locationUUID; }
    public Node getNode() { return m_node; }
    public NoteBytes getPublicKey() { return m_publicKey; }
    public boolean getRequiresSealed() { return m_requiredSealed; }

    public NoteBytesObject getNoteBytesObject(){
        return new NoteBytesObject(new NoteBytesPair[]{
    
        });
    }

    public static NoteBytesObject readWriteLocation(int size, NoteBytesReader reader, NoteBytesWriter writer) throws IOException{
        NoteBytesObject locationObject = new NoteBytesObject();

        NoteBytes nextNoteBytes = reader.nextNoteBytes();
        int length = 0;
        while(nextNoteBytes != null && length < size){

        }
        
        return locationObject;
    }
}

