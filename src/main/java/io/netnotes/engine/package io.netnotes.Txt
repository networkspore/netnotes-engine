package io.netnotes.engine
public class AppData
	public constant SETTINGS_FILE_NAME
	public constant HOME_DIRECTORY
	public constant DESKTOP_DIRECTORY
	public constant SALT_LENGTH
	private field m_dataSemaphore
	private field m_appDir
	private field m_bcryptKey
	private field m_updates
	private field m_salt
	private field m_appInterface
	private field m_appFile
	private field m_appHashData
	private field m_javaVersion
	private field m_secretKey
	private constant FILE_PATH
	private constant CREATED
	private field m_execService
	private field m_schedualedExecutor
	public constructor AppData(AppInterface)
	public method getSalt()
	public method getDataSemaphore()
	public method getAppInterface()
	public constructor AppData(AppInterface, NoteBytes, ExecutorService, ScheduledExecutorService)
	public method getExecService()
	public method getSchedualedExecService()
	private method getSettingsFile()
	private method readSettings()
	public method getUpdates()
	public method setUpdates(boolean)
	public method getAppDir()
	public method getAppFile()
	public method createKey(NoteBytes)
	public method checkForUpdates(String, String, SimpleObjectProperty<UpdateInformation>)
	public method getAppKey()
	public method getAppKeyBytes()
	public method setAppKey(NoteBytes, NoteBytes)
	method updateAppKey(NoteBytes, EventHandler<WorkerStateEvent>, EventHandler<WorkerStateEvent>)
		class new Task() {...}
			public method call()
	public method getJavaVersion()
	public method appHashData()
	public method appFile()
	public method getSecretKey()
	public method setSecretKey(SecretKey)
	public method save()
	public method verifyAppPassword(char[], EventHandler<WorkerStateEvent>, EventHandler<WorkerStateEvent>)
		class new Task() {...}
			public method call()
	public method getDataDir()
	private method createNewDataFile(File)
	private method getIdDataFile()
	public method getIdDataFile(NoteStringArray, EventHandler<WorkerStateEvent>, EventHandler<WorkerStateEvent>)
		class new Task() {...}
			public method call()
	private method parseIdDataFileUpdate(NoteStringArray, File, PipedOutputStream, PipedOutputStream, EventHandler<WorkerStateEvent>)
		class new Task() {...}
			public method call()
	private method parseAndWriteTree(NoteBytesReader, NoteBytesWriter, NoteBytesMetaData, List<NoteBytes>, File, EventHandler<WorkerStateEvent>)
	private method parseObjectAndFindPath(NoteBytesReader, NoteBytesWriter, int, List<NoteBytes>, int, File, EventHandler<WorkerStateEvent>)
	private method parseNestedObject(NoteBytesWriter, byte[], List<NoteBytes>, int, File, EventHandler<WorkerStateEvent>)
	private method parseObjectContent(NoteBytesReader, NoteBytesWriter, int, List<NoteBytes>, int, File, EventHandler<WorkerStateEvent>)
	private method handleFinalPathElement(NoteBytesWriter, NoteBytesPair, EventHandler<WorkerStateEvent>)
	private method extractFilePathFromObjectData(byte[])
	private method insertMissingPath(NoteBytesWriter, List<NoteBytes>, int, File, EventHandler<WorkerStateEvent>)
	private method insertMissingPathInObject(NoteBytesWriter, byte[], List<NoteBytes>, int, File, EventHandler<WorkerStateEvent>)
	private method buildPathStructure(List<NoteBytes>, int, File, EventHandler<WorkerStateEvent>)
	private method createPathStructure(List<NoteBytes>, File, EventHandler<WorkerStateEvent>)
	private method updateDataEncryption(SecretKey, SecretKey, EventHandler<WorkerStateEvent>, EventHandler<WorkerStateEvent>)
		class new Task() {...}
			public method call()
	private method updateDataEncryption(SecretKey, SecretKey, File, PipedOutputStream, PipedOutputStream, EventHandler<WorkerStateEvent>)
		class new Task() {...}
			public method call()
	private method parseAndUpdateTree(NoteBytesReader, NoteBytesWriter, NoteBytesMetaData, File, SecretKey, SecretKey)
	private method parseObjectAndUpdateFiles(NoteBytesReader, NoteBytesWriter, int, File, SecretKey, SecretKey)
	private method parseNestedObjectAndUpdate(NoteBytesWriter, byte[], File, SecretKey, SecretKey)
	private method parseObjectContentAndUpdate(NoteBytesReader, NoteBytesWriter, int, File, SecretKey, SecretKey)
	private method UpdateFileEncryption(File, File, SecretKey, SecretKey)
	public method removeIdDataFile(NoteStringArray, EventHandler<WorkerStateEvent>, EventHandler<WorkerStateEvent>)
		class new Task() {...}
			public method call()
	private method parseIdDataFileRemoveFile(NoteStringArray, File, PipedOutputStream, PipedOutputStream, EventHandler<WorkerStateEvent>)
		class new Task() {...}
			public method call()
	private method parseAndRemoveFromTree(NoteBytesReader, NoteBytesWriter, NoteBytesMetaData, List<NoteBytes>)
	private method parseObjectAndRemovePath(NoteBytesReader, NoteBytesWriter, int, List<NoteBytes>, int)
	private method parseNestedObjectAndRemove(byte[], List<NoteBytes>, int)
	private method parseObjectContentAndRemove(NoteBytesReader, NoteBytesWriter, int, List<NoteBytes>, int)
	private method writeModifiedNestedObject(NoteBytesWriter, byte[], List<NoteBytes>, int)
	private method writeModifiedNestedObjectData(NoteBytesWriter, byte[], List<NoteBytes>, int)
	private method deleteAllFilesInObject(NoteBytesReader, int)
	private method deleteAllFilesInValue(NoteBytes)
	private method deleteAllFilesInValueData(NoteBytesMetaData, byte[])
	private method deleteAllFilesInObjectData(byte[])
	private method isObjectDataEmpty(byte[])
	method readEncryptedFile(File, Semaphore, AtomicBoolean, PipedOutputStream, Runnable, EventHandler<WorkerStateEvent>, EventHandler<WorkerStateEvent>)
		class new Task() {...}
			public method call()
	method saveEncrypteFile(File, Semaphore, byte[], EventHandler<WorkerStateEvent>, EventHandler<WorkerStateEvent>)
		class new Task() {...}
			public method call()
	method saveEncryptedFile(File, Semaphore, PipedOutputStream, EventHandler<WorkerStateEvent>, EventHandler<WorkerStateEvent>)
		class new Task() {...}
			public method call()
	public method shutdown()
